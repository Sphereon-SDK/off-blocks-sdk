/*
 * OffBlock API
 * OffBlock description of API.
 *
 * OpenAPI spec version: API TOS
 * Contact: myeaddress@company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.offblocks.api;

import com.sphereon.sdk.offblocks.handler.ApiException;
import com.sphereon.sdk.offblocks.model.EditUserRequest;
import com.sphereon.sdk.offblocks.model.EmailVerificationRequest;
import com.sphereon.sdk.offblocks.model.ModelApiResponse;
import java.time.OffsetDateTime;
import com.sphereon.sdk.offblocks.model.SignatoryListsDTO;
import com.sphereon.sdk.offblocks.model.SignatoryListsRequest;
import com.sphereon.sdk.offblocks.model.UserActivationRequest;
import com.sphereon.sdk.offblocks.model.UserIdentityAvailability;
import com.sphereon.sdk.offblocks.model.UserProfile;
import com.sphereon.sdk.offblocks.model.UserSummary;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserControllerApi
 */
@Ignore
public class UserControllerApiTest {

    private final UserControllerApi api = new UserControllerApi();

    
    /**
     * checkEmailAvailability
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkEmailAvailabilityUsingGETTest() throws ApiException {
        String email = null;
        UserIdentityAvailability response = api.checkEmailAvailabilityUsingGET(email);

        // TODO: test validations
    }
    
    /**
     * checkUsernameAvailability
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkUsernameAvailabilityUsingGETTest() throws ApiException {
        String username = null;
        UserIdentityAvailability response = api.checkUsernameAvailabilityUsingGET(username);

        // TODO: test validations
    }
    
    /**
     * createSignatoryLists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSignatoryListsUsingPOSTTest() throws ApiException {
        SignatoryListsRequest signatoryListsRequest = null;
        SignatoryListsDTO response = api.createSignatoryListsUsingPOST(signatoryListsRequest);

        // TODO: test validations
    }
    
    /**
     * deleteUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserUsingDELETETest() throws ApiException {
        Object response = api.deleteUserUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * editUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editUserUsingPUTTest() throws ApiException {
        EditUserRequest editUserRequest = null;
        Object response = api.editUserUsingPUT(editUserRequest);

        // TODO: test validations
    }
    
    /**
     * emailVerification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailVerificationUsingPOSTTest() throws ApiException {
        EmailVerificationRequest emailVerificationRequest = null;
        UserIdentityAvailability response = api.emailVerificationUsingPOST(emailVerificationRequest);

        // TODO: test validations
    }
    
    /**
     * getCurrentUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserUsingGETTest() throws ApiException {
        Boolean accountNonExpired = null;
        Boolean accountNonLocked = null;
        String authorities0Authority = null;
        Boolean business = null;
        Boolean credentialsNonExpired = null;
        String email = null;
        Boolean enabled = null;
        String id = null;
        OffsetDateTime joinedAt = null;
        String lastName = null;
        String name = null;
        String password = null;
        String username = null;
        UserSummary response = api.getCurrentUserUsingGET(accountNonExpired, accountNonLocked, authorities0Authority, business, credentialsNonExpired, email, enabled, id, joinedAt, lastName, name, password, username);

        // TODO: test validations
    }
    
    /**
     * getSignatoryLists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSignatoryListsUsingGETTest() throws ApiException {
        List<SignatoryListsDTO> response = api.getSignatoryListsUsingGET();

        // TODO: test validations
    }
    
    /**
     * getUserIdentityChainId
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserIdentityChainIdUsingGETTest() throws ApiException {
        String userId = null;
        ModelApiResponse response = api.getUserIdentityChainIdUsingGET(userId);

        // TODO: test validations
    }
    
    /**
     * getUserProfile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserProfileUsingGETTest() throws ApiException {
        String username = null;
        UserProfile response = api.getUserProfileUsingGET(username);

        // TODO: test validations
    }
    
    /**
     * getUsersByNameOrEmailOrStaffNumber
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersByNameOrEmailOrStaffNumberUsingGETTest() throws ApiException {
        String search = null;
        List<UserProfile> response = api.getUsersByNameOrEmailOrStaffNumberUsingGET(search);

        // TODO: test validations
    }
    
    /**
     * publicKeyVerification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publicKeyVerificationUsingPOSTTest() throws ApiException {
        UserActivationRequest userActivationRequest = null;
        UserIdentityAvailability response = api.publicKeyVerificationUsingPOST(userActivationRequest);

        // TODO: test validations
    }
    
    /**
     * userActivation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userActivationUsingPOSTTest() throws ApiException {
        UserActivationRequest userActivationRequest = null;
        ModelApiResponse response = api.userActivationUsingPOST(userActivationRequest);

        // TODO: test validations
    }
    
}
